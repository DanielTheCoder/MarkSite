@using System.Configuration;
@using System.IO;
CACHE MANIFEST

# pages
/
@RenderPages(PageSystem.IndexPage.Children)

# assets
@RenderThemeContent()
@RenderAssets()

NETWORK:
*

@* Helper methods *@
@helper RenderThemeContent()
{
	string folder = Server.MapPath("/themes/" + ConfigurationManager.AppSettings["theme"]);
	List<string> extensions = new List<string> { ".js", ".css", ".woff", ".ttf", ".eot" };
	foreach (string file in Directory.GetFiles(folder, "*.*", SearchOption.AllDirectories))
	{
		if (extensions.Contains(Path.GetExtension(file)))
		{
			string relative = file.Replace(Server.MapPath("~/"), string.Empty).Replace("\"", "/").ToLowerInvariant();
			@(Helpers.Fingerprint("/" + relative) + Environment.NewLine)
	}
}
}

@helper RenderAssets()
{
	string pageFolder = Server.MapPath(ConfigurationManager.AppSettings["pageFolder"]);
	List<string> extensions = new List<string> { ".gif", ".png", ".jpg" };
	foreach (string file in Directory.EnumerateFiles(pageFolder, "*.*", SearchOption.AllDirectories))
	{
		if (extensions.Contains(Path.GetExtension(file)))
		{
			string relative = file.Replace(Path.GetDirectoryName(pageFolder), string.Empty).Replace("\"", "/").ToLowerInvariant();
			@(Helpers.Fingerprint(relative) + Environment.NewLine)
	}
}
}


@helper RenderPages(IEnumerable<MarkdownPage> pages)
{
	foreach (MarkdownPage page in pages.Where(p => p.ShowInMenu))
	{
		@CreateLink(page)
		if (page.Children.Count > 0)
		{
			@RenderPages(page.Children)
		}
	}
}

@helper CreateLink(MarkdownPage page)
{
	List<string> segments = new List<string>(new[] { page.Slug });
	string className = page == PageSystem.GetCurrentPage(Request) ? "active" : null;
	MarkdownPage parent = page.Parent;

	while (parent != null)
	{
		segments.Add(parent.Slug);
		parent = parent.Parent;
	}

	string path = string.Join("/", segments.Reverse<string>().Skip(1));
	path = string.IsNullOrEmpty(path) ? string.Empty : path + "/";
<text>/@path</text>
}

@{
	Response.ContentType = "text/cache-manifest";
	DateTime date = PageSystem.SetCacheHeaders(Context);

	@("# last modified: " + date.ToString("s"))
}