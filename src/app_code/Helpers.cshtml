@using System.Text.RegularExpressions;
@using System.Configuration;

@functions {
	public static string Fingerprint(string rootRelativePath)
	{
		if (Request.IsLocal)
		{
			return rootRelativePath; // So Browser Link's CSS auto-sync works
		}

		string relative = VirtualPathUtility.ToAbsolute("~" + rootRelativePath);
		string absolute = Server.MapPath(relative);

		if (!File.Exists(absolute))
		{
			throw new Exception("File not found " + rootRelativePath);
		}

		DateTime date = File.GetLastWriteTime(absolute);
		int index = relative.LastIndexOf('.');

		return relative.Insert(index, "_" + date.Ticks);
	}

	public static string CreateLink(MarkdownPage page)
	{
		List<string> segments = new List<string>(new[] { page.Slug });
		MarkdownPage parent = page.Parent;

		while (parent != null)
		{
			segments.Add(parent.Slug);
			parent = parent.Parent;
		}

		string path = string.Join("/", segments.Reverse<string>().Skip(1));
		return "/" + (string.IsNullOrEmpty(path) ? string.Empty : path + "/");
	}
}

@helper RenderMenu(IEnumerable<MarkdownPage> pages)
{
	<ul>
		@foreach (MarkdownPage page in pages.Where(p => p.ShowInMenu))
		{
			<li>
				@CreateAnchorTag(page)
				@if (page.Children.Count > 0)
				{
					@RenderMenu(page.Children)
				}
			</li>
		}
	</ul>
}

@helper RenderBreadcrumb(MarkdownPage page)
{
	List<MarkdownPage> list = new List<MarkdownPage>(new[] { page });
	while (page.Parent != null)
	{
		list.Add(page.Parent);
		page = page.Parent;
	}

	<ul id="breadcrumb">
		@foreach (MarkdownPage item in list.Reverse<MarkdownPage>())
		{
			<li>@CreateAnchorTag(item)</li>
		}
	</ul>
}

@helper CreateAnchorTag(MarkdownPage page)
{
	string link = CreateLink(page);
	string className = page == PageSystem.GetCurrentPage(Request) ? "active" : null;
	
	<a href="@link" class="@className">@page.Title</a>
}

@helper RenderContent(MarkdownPage page)
{
	Regex regex = new Regex(@"<img.+(?<attr>src)=""(?<href>[^\""']+)"".*?>");
	string baseFolder = ConfigurationManager.AppSettings["pageFolder"].Trim('~', '/');

	string html = regex.Replace(page.Content, delegate (Match match)
	{
		string value = match.Value;
		string href = match.Groups["href"].Value;

		if (href.StartsWith("_assets"))
		{
			string root = page.FileName ?? "";
			int index = root.LastIndexOf('/') + 1;
			return value.Replace(href, Fingerprint("/" + baseFolder + "/" + root.Substring(0, index) + href));
		}

		return value;
	});

	@Html.Raw(html)
}