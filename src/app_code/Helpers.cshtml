@using System.Text.RegularExpressions;
@using System.Configuration;

@helper RenderMenu(IEnumerable<MarkdownPage> pages)
{
	<ul>
		@foreach (MarkdownPage page in pages)
		{
			<li>
				@CreateLink(page)
				@if (page.Children.Count > 0)
				{
					@RenderMenu(page.Children)
				}
			</li>
		}
	</ul>
}

@helper RenderBreadcrumb(MarkdownPage page)
{
	List<MarkdownPage> list = new List<MarkdownPage>(new[] { page });
	while (page.Parent != null)
	{
		list.Add(page.Parent);
		page = page.Parent;
	}

	<ul id="breadcrumb">
		@foreach (MarkdownPage item in list.Reverse<MarkdownPage>())
		{
			<li>@CreateLink(item)</li>
		}
	</ul>
}

@helper CreateLink(MarkdownPage page)
{
	List<string> segments = new List<string>(new[] { page.Slug });
	string className = page == PageSystem.GetCurrentPage(Request) ? "active" : null;
	MarkdownPage parent = page.Parent;

	while (parent != null)
	{
		segments.Add(parent.Slug);
		parent = parent.Parent;
	}

	string path = string.Join("/", segments.Reverse<string>().Skip(1));
	<a href="/@path" class="@className">@page.Title</a>
}

@helper RenderContent(MarkdownPage page)
{
	Regex _regex = new Regex(@"<(img).+(href|src)=(?<quote>\""|'|)(?<href>[^\""']+\.(css|js|png|jpg|jpeg|gif|ico|svg|json|xml|woff|ttf|eot))\k<quote>.*?>");

	string html = _regex.Replace(page.Content, delegate (Match match)
	{
		string value = match.Value;
		string href = match.Groups["href"].Value;

		if (href.StartsWith("_assets"))
		{
			string root = Request.QueryString["path"];
			int index = root.LastIndexOf('/') + 1;
			string baseFolder = ConfigurationManager.AppSettings["pageFolder"].Trim('~', '/');
			value = value.Replace(href, "/" + baseFolder + "/" + root.Substring(0, index) + href);
		}

		return value;
	});

	@Html.Raw(html)
}